import * as pdfjs from 'pdfjs-dist';
export declare type Page = {
    lines: string[];
};
/**
 * Read a pdf file and convert it into lines of text.
 *
 * If a URL is used to fetch the PDF data a standard XMLHttpRequest(XHR) is used, which means it must follow the
 * same origin rules that any XHR does e.g. No cross domain requests without CORS.
 *
 * Parameter documentation copied from getDocument's documentation in
 * https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/pdfjs-dist/index.d.ts
 * @param source                   url or path as a string or other data types as seen in type below
 * @param pdfDataRangeTransport    Used if you want to manually server range requests for data in the PDF.  @ee viewer.js
 *                                     for an example of pdfDataRangeTransport's interface.
 * @param passwordCallback         Used to request a password if wrong or no password was provided.  The callback receives two
 *                                     parameters: function that needs to be called with new password and the reason.
 * @param progressCallback         Progress callback.
 * @return                         A promise that is resolved with an array of each page's text content.
 **/
export declare function readPdfText(source: pdfjs.PDFSource | string | Uint8Array | BufferSource, pdfDataRangeTransport?: pdfjs.PDFDataRangeTransport, passwordCallback?: (fn: (password: string) => void, reason: string) => string, progressCallback?: (progressData: pdfjs.PDFProgressData) => void): Promise<Page[]>;
/**
 * Parses individual text items generated by pdf.js This allows lower level control of what actually gets parsed.
 * For example, a consumer of this function may remove entire sections of the pdf text prior to passing items in here.
 * See parsePage function above for example usage.
 *
 * @param pdfItems     An array of pdfjs.TextContentItem items.
 **/
export declare function parsePageItems(pdfItems: pdfjs.TextContentItem[]): Page;
